530. 二叉搜索树的最小绝对差
给你一棵所有节点为非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。

 

示例：

输入：

   1
    \
     3
    /
   2

输出：
1

解释：
最小绝对差为 1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。

//  中序遍历是个升序数列，每次计算两数之间最小值，取最小
class Solution {
    int min = Integer.MAX_VALUE;
    TreeNode pre=null;
    public int getMinimumDifference(TreeNode root) {
        dfs(root);
        return min;
    }

    public void dfs(TreeNode root){
        if(root==null){
            return ;
        }
        dfs(root.left);
        if(pre != null)
            min = Math.min(min,root.val - pre.val);
        // 将此节点设置为前一节点
        pre = root;
        dfs(root.right);
    }
}


中序遍历模板：
void postorderTrav(Node*root{ //中序遍历
if(root==NULL) return;
postorderTrav(root->lchild);
print("%d",root->data);  //中间的时候访问根节点
postorderTrav(root->rchild);
}


前序遍历模板：
void preorder(Node*root){
if(root==NULL) return ;
print("%d",root->data); //最先访问根节点
preorder(root->lchild);
preorder(root->rchild);
}


后序遍历模板：
void porde(Node*root){
if(root==NULL) return ;
porder(root->lchild);
porder(root->rchild);
print("%d",root->data);
}



}
